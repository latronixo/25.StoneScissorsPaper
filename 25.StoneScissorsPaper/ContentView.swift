//
//  ContentView.swift
//  25.StoneScissorsPaper
//
//  Created by –í–∞–ª–µ–Ω—Ç–∏–Ω on 21.05.2025.
//

import SwiftUI

struct ContentView: View {
    //–≤–∞—Ä–∏–∞–Ω—Ç—ã –∂–µ—Å—Ç–æ–≤
    private var moves = ["ü™®", "üìú", "‚úÇ"]
    //–∂–µ—Å—Ç—ã-–ø–æ–±–µ–¥–∏—Ç–µ–ª–∏
    private var winningMoves = ["üìú", "‚úÇ", "ü™®"]
    //–∂–µ—Å—Ç—ã-–ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—â–∏–µ
    private var losingMoves = ["‚úÇ", "ü™®", "üìú"]
    
    @State private var appMove = ""         //–∂–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–Ω–¥–æ–º–Ω–æ "–≤—ã–±—Ä–æ—Å–∏—Ç" –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    @State private var score = 0            //–æ—á–∫–∏
    @State private var shouldWin = false    //—Ñ–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –∑–∞–¥–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –≤—ã–π–≥—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å?
    @State private var round = 1            //–Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
    @State private var showAlert = false    //—Ñ–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
    
    //Text, –ø–∏—à—É—à–∏–π –∑–∞–¥–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –≤—ã–π–≥—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å?
    struct taskText: View {
        let shouldWin: Bool
        
        var body: some View {
            if shouldWin {
                Text("–≤—ã–∏–≥—Ä–∞—Ç—å")
                    .foregroundStyle(.blue)
            } else {
                Text("–ø—Ä–æ–∏–≥—Ä–∞—Ç—å")
                    .foregroundStyle(.red)
            }
        }
    }
    
    var body: some View {
        VStack {
            VStack {
                Text("–í–∞—à —Å—á–µ—Ç: \(score)")
                    .font(.largeTitle.bold())
                Text("–•–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
                Text(appMove)
                    .font(.system(size: 100))
                Spacer()
                Text("–í–∞–º –Ω—É–∂–Ω–æ:")
                taskText(shouldWin: shouldWin)
                    .font(.largeTitle)
                Spacer()
            }
            
            Text("–í–∞—à —Ö–æ–¥:")
                .font(.title.bold())
            Spacer()
            HStack{
                ForEach(moves, id: \.self) { move in
                    Button {
                        moveTapped(move)
                    } label: {
                        Text(move)
                            .font(.system(size: 100))
                    }
                    .alert("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á–µ—Ç: \(String(score))", isPresented: $showAlert){
                        Button("OK") {
                            if round == 10 {
                                round = 0
                                score = 0
                            }
                        }
                    }

                }
            }
            Spacer()
        }
        .padding(10)
        .onAppear{
            nextRound()
            shouldWin = Bool.random()
        }

    }
    
    //—Å–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private func moveTapped(_ userMove: String) {
        let indexAppMove = moves.firstIndex(of: appMove)    //–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ –∂–µ—Å—Ç–æ–≤
        var indexUserMove: Int?                             //–∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        //–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å, —Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤ –º–∞—Å—Å–∏–≤–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        if shouldWin {
            indexUserMove = winningMoves.firstIndex(of: userMove)
        } else {
            //–µ—Å–ª–∏ –∂–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–∏–≥—Ä–∞—Ç—å, —Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤ –º–∞—Å—Å–∏–≤–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—â–∏—Ö
            indexUserMove = losingMoves.firstIndex(of: userMove)
        }
        
        //–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞–Ω–∏–µ–º, —Ç–æ –∏–Ω–∫—Ä–∏–º–∏–Ω–∏—Ä—É–µ–º —Å—á–µ—Ç, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        score += indexUserMove == indexAppMove ? 1 : -1

        if round == 10 {
            showAlert = true    //–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç —Å —Ç–µ–∫—É—â–∏–º —Å—á–µ—Ç–æ–º
//            round = 0
//            score = 0
        } else {
            nextRound()
        }

        //
        //print ("–∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∂–µ—Å—Ç–∞ \(indexUserMove)")
    }
    
    private func nextRound() {
        
        round += 1
        appMove = moves[Int.random(in: 0...2)]
        shouldWin.toggle()
        print("–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥–∞–¥–∞–ª–æ \(appMove), shouldWin = \(shouldWin)")
    }
}
    
#Preview {
    ContentView()
}
